<!DOCTYPE html>
<html lang="<%= locals.page.lang %>">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="_description" content="">
    <meta name="author" content="">

    <title>Shibboleth Confirmation</title>
    <!-- Bootstrap core CSS -->
    <link href="<%= locals.baseURL %>assets/bootstrap/css/bootstrap.min.css" rel="stylesheet" type="text/css">
    <link href="<%= locals.baseURL %>assets/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" type="text/css">

    <!-- Custom styles for this template -->
    <link href="<%= locals.baseURL %>assets/authenticators/shibboleth/style.css" rel="stylesheet" type="text/css">
    <script src="<%= locals.baseURL %>assets/bootstrap/js/bootstrap.bundle.min.js" type="text/javascript"></script>
    <script type="application/javascript">
      var jwtToken = "<%= locals.token %>";
      var redirectTo = "<%= locals.redirectTo %>";
      var listOfCountries = <%- JSON.stringify(locals.listOfCountries); %>;
      var accountFields = <%- JSON.stringify(locals.accountFields); %>;
      var page = <%- JSON.stringify(locals.page); %>;

      function message_broadcast(key, value) {
        value = typeof value === "object" ? JSON.stringify(value) : value;
        var cid = "<%= locals.cid %>";
        localStorage.setItem(key + "_" + cid, value);
      }

      if (jwtToken.trim() !== "") {
        message_broadcast("token", "<%= locals.token %>");
        if (redirectTo === "") {
          // opened in other window
          window.close();
        } else {
          // opened in same window
          window.setTimeout(() => {
            document.location.href = redirectTo;
          }, 0);
        }
      }

      function onActionClick(event) {
        var id = event.target.getAttribute("data-field-id");
        var type = event.target.getAttribute("data-action-type");
        var parent = event.target.parentElement.parentElement.parentElement;

        if (type === "remove") {
          event.target.parentElement.parentElement.remove();
        } else if (type === "add") {
          var selectionRow = generateCategorySelectionRow(accountFields.find(a => a.id === id), true);
          parent.appendChild(selectionRow);
        }

        updateActionIcons(parent);
      }

      function updateActionIcons(div) {
        const actions = div.getElementsByClassName("action");
        for (var i = 0; i < actions.length; i++) {
          var actionColumn = actions[i];
          var actionIcon = actionColumn.querySelector("i");

          if (i === 0 && i === actions.length - 1) {
            actionColumn.innerHTML = '<i class="bi bi-plus-circle action-icon add" data-action-type="add"' +
              ' data-field-id="' + actionIcon.getAttribute("data-field-id") + '"></i>';
          } else if (i < actions.length - 1) {
            actionColumn.innerHTML = '<i class="bi bi-dash-circle action-icon remove" data-action-type="remove"' +
              ' data-field-id="' + actionIcon.getAttribute("data-field-id") + '" style="visibility: hidden"></i>';
          } else {
            actionColumn.innerHTML = '<i class="bi bi-plus-circle action-icon add" data-action-type="add"' +
              ' data-field-id="' + actionIcon.getAttribute("data-field-id") + '"></i>';
            actionColumn.innerHTML += ' <i class="bi bi-dash-circle action-icon remove" data-action-type="remove"' +
              ' data-field-id="' + actionIcon.getAttribute("data-field-id") + '" style="visibility: hidden"></i>';
          }
        }
      }

      function onSelectionCategoryHover(event) {
        var action = this.querySelector(".action");
        var actionIcons = action.getElementsByTagName("i");

        for (var i = 0; i < actionIcons.length; i++) {
          var actionIcon = actionIcons[i];
          if (actionIcon.getAttribute("data-action-type") !== "add") {
            if (event.type === "mouseenter") {
              actionIcon.style.visibility = "visible";
            } else {
              actionIcon.style.visibility = "hidden";
            }
          }
        }
      }

      function listenForActionClicks(actions) {
        for (var i = 0; i < actions.length; i++) {
          var action = actions[i];
          action.addEventListener("click", onActionClick);
        }
      }

      function unListenForActionClicks(actions) {
        for (var i = 0; i < actions.length; i++) {
          var action = actions[i];
          action.removeEventListener("click", onActionClick);
        }
      }

      function generateHeadline(accountField) {
        var definition = accountField.definition;
        var schema = definition.schema;
        var size = definition.schema.size ?? 2;
        var result = document.createElement("div");
        result.setAttribute("class", "row g-0");

        var headline = document.createElement("h" + size);
        headline.setAttribute("class", "col-md-12");
        headline.innerHTML = schema.translation[page.lang];
        result.appendChild(headline);

        return result;
      }

      function generateCategorySelectionRow(accountField) {
        var definition = accountField.definition;
        var schema = definition.schema;
        var selectRow = document.createElement("div");
        selectRow.setAttribute("class", "row mb-2");

        for (var i = 0; i < schema.selections.length; i++) {
          var selection = schema.selections[i];

          var selectColumn = document.createElement("div");
          if (i > 0) {
            selectColumn.setAttribute("class", selection.class + " g-0");
          } else {
            selectColumn.setAttribute("class", selection.class);
          }

          var selectElement = document.createElement("select");
          selectElement.setAttribute("class", "form-select");
          selectElement.appendChild(document.createElement("option"));

          for (let j = 0; j < selection.options.length; j++) {
            var option = selection.options[j];
            var lang = option.hasOwnProperty(page.lang) ? page.lang : "en";
            var optionElement = document.createElement("option");
            optionElement.setAttribute("value", option.value);
            optionElement.innerHTML = option.label[lang];
            selectElement.appendChild(optionElement);
          }

          selectColumn.appendChild(selectElement);
          selectRow.appendChild(selectColumn);
        }

        if (definition.multipleResults) {
          var actionColumn = document.createElement("div");
          actionColumn.setAttribute("class", "col-1 action");

          actionColumn.innerHTML = '<i class="bi bi-plus-circle action-icon add" data-action-type="add"' +
            ' data-field-id="' + accountField.id + '"></i>';

          actionColumn.addEventListener("click", onActionClick);
          selectRow.addEventListener("mouseenter", onSelectionCategoryHover);
          selectRow.addEventListener("mouseleave", onSelectionCategoryHover);
          selectRow.appendChild(actionColumn);
        }

        return selectRow;
      }

      function generateCategorySelection(accountField) {
        var definition = accountField.definition;
        var schema = definition.schema;
        var result = document.createElement("div");
        result.setAttribute("class", "row category-selection");
        result.setAttribute("id", "category_selection_" + accountField.id);

        var labelRow = document.createElement("div");
        labelRow.setAttribute("class", "col-12");
        labelRow.innerHTML = "<label>" + schema.label[page.lang] + "</label>";
        result.appendChild(labelRow);

        result.appendChild(generateCategorySelectionRow(accountField));
        return result;
      }

      function generateFields() {
        var main = document.getElementsByTagName("main")[0];

        for (var i = 0; i < accountFields.length; i++) {
          var accountField = accountFields[i];

          switch (accountField.type) {
            case "header":
              var headline = generateHeadline(accountField);
              main.appendChild(headline);
              break;
            case "category_selection":
              var categorySelection = generateCategorySelection(accountField);
              main.appendChild(categorySelection);
              break;
          }
        }
      }

      window.onload = function () {
        generateFields();
      }
    </script>
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-dark bg-success mb-3" aria-label="Fifth navbar example">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">OCTRA-API</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarsExample05"
                aria-controls="navbarsExample05" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarsExample05">
            <ul class="navbar-nav me-auto mb-lg-0">
            </ul>
            <div class="dropdown pr-3">
                <a class="dropdown-toggle text-white text-decoration-none mr-3 pr-3" href="#" data-bs-toggle="dropdown"
                   aria-expanded="false"><%= locals.page.lang.toUpperCase() %></a>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="?lang=de">DE</a></li>
                    <li><a class="dropdown-item" href="?lang=en">EN</a></li>
                </ul>
            </div>
        </div>
    </div>
</nav>
<div class="container">
    <noscript>
        Please enable Javascript.
    </noscript>
    <main>
    </main>
    <button class="btn btn-primary btn-block mt-3" id="submitButton" disabled="disabled" type="submit">
        <%= locals.t('general.save and continue') %>
    </button>
</div>
</body>
</html>
